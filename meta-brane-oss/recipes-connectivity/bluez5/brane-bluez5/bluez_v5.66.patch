diff --git a/src/adapter.c b/src/adapter.c
index 8fb2acdc8..6675658f3 100644
--- a/src/adapter.c
+++ b/src/adapter.c
@@ -773,6 +773,23 @@ static bool set_mode(struct btd_adapter *adapter, uint16_t opcode,
 	case MGMT_OP_SET_BONDABLE:
 		setting = MGMT_SETTING_BONDABLE;
 		break;
+	// BRANE added everything from here on down
+	// not sure why these were not supported (they are used)
+	case MGMT_OP_SET_SSP:
+		setting = MGMT_SETTING_SSP;
+		break;
+	case MGMT_OP_SET_LE:
+		setting = MGMT_SETTING_LE;
+		break;
+	case MGMT_OP_SET_BREDR:
+		setting = MGMT_SETTING_BREDR;
+		break;
+	case MGMT_OP_SET_SECURE_CONN:
+		setting = MGMT_SETTING_SECURE_CONN;
+		break;
+	default:
+		btd_error(adapter->dev_id, "!!! UNKNOWN OPCODE !!!");
+		break;
 	}
 
 	DBG("sending set mode command for index %u", adapter->dev_id);
@@ -8956,6 +8973,10 @@ int adapter_set_io_capability(struct btd_adapter *adapter, uint8_t io_cap)
 {
 	struct mgmt_cp_set_io_capability cp;
 
+#if 0
+	// BRANE: added in commit 1880b299086659844889cdaf687133aca5eaf102
+	//      has side effect of enabling pairing when the agent is registered.
+	//      supposed to be part of the AlwaysPairable main.conf option.
 	if (!btd_opts.pairable) {
 		if (io_cap == IO_CAPABILITY_INVALID) {
 			if (adapter->current_settings & MGMT_SETTING_BONDABLE)
@@ -8968,6 +8989,7 @@ int adapter_set_io_capability(struct btd_adapter *adapter, uint8_t io_cap)
 			set_mode(adapter, MGMT_OP_SET_BONDABLE, 0x01);
 	} else if (io_cap == IO_CAPABILITY_INVALID)
 		io_cap = IO_CAPABILITY_NOINPUTNOOUTPUT;
+#endif
 
 	memset(&cp, 0, sizeof(cp));
 	cp.io_capability = io_cap;
